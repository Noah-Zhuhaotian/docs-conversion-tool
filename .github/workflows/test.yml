name: Test Dependencies and Environment

on:
  # Auto-trigger on dev branch
  push:
    branches: [dev]
    paths:
      - 'docs/word/**'
      - 'automation.js'
      - 'package.json'
  
  # Allow manual trigger
  workflow_dispatch:

# Use concurrency to ensure only one workflow runs at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Install Node.js dependencies
        run: npm ci
      
      - name: Prepare test environment
        run: |
          mkdir -p docs/word
          mkdir -p docs/markdown
          mkdir -p docs/images
          
          # Check for mammoth dependency
          if ! npm list mammoth &>/dev/null; then
            echo "::error::mammoth dependency is missing, please install it"
            exit 1
          fi
      
      - name: Run tests
        run: |
          # Test if directories exist and are writable
          if [ ! -d "docs/word" ] || [ ! -w "docs/word" ]; then
            echo "::error::docs/word directory does not exist or is not writable"
            exit 1
          fi
          
          if [ ! -d "docs/markdown" ] || [ ! -w "docs/markdown" ]; then
            echo "::error::docs/markdown directory does not exist or is not writable"
            exit 1
          fi
          
          if [ ! -d "docs/images" ] || [ ! -w "docs/images" ]; then
            echo "::error::docs/images directory does not exist or is not writable"
            exit 1
          fi
          
          # Test if script exists
          if [ ! -f "automation.js" ]; then
            echo "::error::automation.js script not found"
            exit 1
          fi
          
          echo "All tests passed successfully"
        
      - name: Generate output
        id: test-result
        run: |
          if [ $? -eq 0 ]; then
            echo "tests_passed=true" >> $GITHUB_OUTPUT
          else
            echo "tests_passed=false" >> $GITHUB_OUTPUT
          fi